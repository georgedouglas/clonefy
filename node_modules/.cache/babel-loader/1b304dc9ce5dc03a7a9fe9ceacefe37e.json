{"ast":null,"code":"import _slicedToArray from \"/home/douglas/Documentos/interfaces-recriadas/pipefy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/douglas/Documentos/interfaces-recriadas/pipefy/src/components/Card/index.js\";\nimport React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport BoardContext from '../Board/context';\nimport { Container, Label } from './styles';\nexport default function Card({\n  data,\n  index,\n  listIndex\n}) {\n  const ref = useRef();\n\n  const _useContext = useContext(BoardContext),\n        move = _useContext.move;\n\n  const _useDrag = useDrag({\n    item: {\n      type: 'CARD',\n      index,\n      listIndex\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        isDragging = _useDrag2[0].isDragging,\n        dragRef = _useDrag2[1];\n\n  const _useDrop = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex;\n      const targetListIndex = listIndex;\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n      const draggedOffset = monitor.getClientOffset();\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, targetListIndex, draggedIndex, targetIndex);\n      item.index = targetIndex;\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        dropRef = _useDrop2[1];\n\n  dragRef(dropRef(ref));\n  return React.createElement(Container, {\n    ref: ref,\n    isDragging: isDragging,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, data.labels.map(label => React.createElement(Label, {\n    key: label,\n    color: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, data.content), data.user && React.createElement(\"img\", {\n    src: data.user,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/douglas/Documentos/interfaces-recriadas/pipefy/src/components/Card/index.js"],"names":["React","useRef","useContext","useDrag","useDrop","BoardContext","Container","Label","Card","data","index","listIndex","ref","move","item","type","collect","monitor","isDragging","dragRef","accept","hover","draggedListIndex","targetListIndex","draggedIndex","targetIndex","targetSize","current","getBoundingClientRect","targetCenter","bottom","top","draggedOffset","getClientOffset","draggedTop","y","dropRef","labels","map","label","content","user"],"mappings":"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","sourcesContent":["import React,{useRef, useContext} from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nimport BoardContext from '../Board/context';\r\n\r\n\r\nimport { Container, Label } from './styles';\r\n\r\nexport default function Card({ data,index, listIndex }) {\r\n  const ref = useRef();\r\n  const { move } = useContext(BoardContext);\r\n  const [{ isDragging }, dragRef] = useDrag({\r\n    item: { type: 'CARD', index, listIndex},\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n  const [, dropRef] = useDrop({\r\n    accept: 'CARD',\r\n    hover(item,monitor) {\r\n      const draggedListIndex = item.listIndex;\r\n      const targetListIndex = listIndex;\r\n\r\n      const draggedIndex = item.index;\r\n      const targetIndex = index;\r\n\r\n      if(draggedIndex === targetIndex){\r\n        return;\r\n      }\r\n      \r\n      const targetSize = ref.current.getBoundingClientRect();\r\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\r\n      \r\n      const draggedOffset = monitor.getClientOffset();\r\n      const draggedTop = draggedOffset.y - targetSize.top;\r\n\r\n      if(draggedIndex < targetIndex && draggedTop < targetCenter){\r\n        return;\r\n      } \r\n      if(draggedIndex > targetIndex && draggedTop > targetCenter){\r\n        return;\r\n      } \r\n\r\n      move(draggedListIndex, targetListIndex, draggedIndex,targetIndex);\r\n\r\n      item.index = targetIndex;\r\n    },\r\n  });\r\n  dragRef(dropRef(ref));\r\n  return (\r\n    <Container ref={ref} isDragging={isDragging}>\r\n      <header>\r\n        {data.labels.map(label => <Label key={label} color={label} />)}\r\n      </header>\r\n      <p>{data.content}</p>\r\n      { data.user && <img src={data.user} alt=\"\"/>}\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}